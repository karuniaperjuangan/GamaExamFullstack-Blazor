@using GamaExamFullstack.Data

@page "/listresult/participant/{id}"

@inject CustomHttpClient Http
@inject NavigationManager NavigationManager
@inject AppSettingsService AppSettingsService
@inject IMatToaster Toaster

<MatH4>Hello, welcome back @participant.name</MatH4>
<MatDivider></MatDivider>

<p><br /><br /></p>
<MatH6>Contest Result</MatH6>
<MatTable Items="@contestAttempts" class="mat-elevation-z5">
    <MatTableHeader>
        <th>Id</th>
        <th>Contest Name</th>
        <th>Correct Answer</th>
        <th>Result</th>
    </MatTableHeader>
    <MatTableRow>
        <td>@context.Id</td>
        <td>@(Task.Run(() => SearchContestName(context.ContestId)).Result)</td>  <!-- Karena dijalankan secara async, yang dipanggil adalah result dari Task.Run -->
        <td>@context.RightAnswer</td>
        <td>@context.score</td>
    </MatTableRow>
</MatTable>
<MatDivider></MatDivider>
<MatButton Link=@("/homepage/participants/"+id)>Return to Homepage</MatButton>


@code {
    [Parameter]
    public string id { get; set; }
    private readonly DBExamContext _context;

    DParticipant participant = new DParticipant();
    ContestAttempt[] contestAttempts;
    string baseUrl;

    protected override async Task OnInitializedAsync()
    {
        participant = await Http.GetJsonAsync<DParticipant>(GlobalSetting.baseAddress + "api/DParticipants/" + id);
        contestAttempts = (await Http.GetJsonAsync<ContestAttempt[]>(GlobalSetting.baseAddress + "api/ContestAttempts")).Where(x => x.ParticipantId == Convert.ToInt32(id)).ToArray();

    }
    public async Task<string> SearchContestName(int contestID) //Harus async karena mengambil data dari DB
    {
        var response = await Http.GetJsonAsync<Contest>(GlobalSetting.baseAddress + "api/Contests/" + Convert.ToString(contestID));
        if (response == null) return "";
        return response.Title;
    }


}