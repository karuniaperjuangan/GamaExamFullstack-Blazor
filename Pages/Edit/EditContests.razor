@using GamaExamFullstack.Data

@page "/edit/contest/{id}"

@inject CustomHttpClient Http
@inject NavigationManager NavigationManager
@inject AppSettingsService AppSettingsService
@inject IMatToaster Toaster

<div>

    <MatHeadline6 Class="text-center">Edit Contest</MatHeadline6>
    <MatTextField @bind-Value="@contest.Title" Label="Contest Title" Icon="text_fields"></MatTextField>
    <p></p>
    <MatTextField @bind-Value="@contest.Duration" Label="Duration in Minutes" TValue="int" Icon="access_time"></MatTextField>
    <p><br /></p>
    <div class="d-inline-flex" style="width:200px;justify-content:space-between">
        <MatButton Raised="true" OnClick="@UpdateContest">Edit</MatButton>
        <MatButton Raised="true" OnClick="@Cancel" >Cancel</MatButton>
    </div>

    <p><br /></p>

    <MatTable Items="@questions" class="mat-elevation-z5">
        <MatTableHeader>
            <th>Id</th>
            <th>Question Text</th>
            <th>Correct Answer</th>
            <th>Image</th>
            <th>Edit/Delete</th>
        </MatTableHeader>
        <MatTableRow>
            <td>@context.Id</td>
            <td>@context.QuestionText</td>
            <td>@context.TrueAnswer</td>
            <td>
                @if(context.imageURL != "" && context.imageURL != null)
                {
                    <img alt="Gambar Soal dengan id @context.Id.ToString()" src="@context.imageURL" class="gambarsoal"/>
                }
            </td>
            <td>
                <MatButton Link=@("/edit/question/"+context.Id) Raised="true">Edit</MatButton>
                <MatButton OnClick="()=>Delete(context.Id)" Raised="true">Delete</MatButton>
            </td>
        </MatTableRow>
    </MatTable>
    <MatButton Link=@("/create/question/"+contest.Id)>New Question</MatButton>
</div>

@code {
    [Parameter]
    public string id { get; set; }

    Contest contest = new Contest();
    Question[] questions;
    Question[] allquestions;
    QuestionAnswer[] questionAnswers;


    protected override async Task OnInitializedAsync()
    {
        contest = await Http.GetJsonAsync<Contest>(GlobalSetting.baseAddress + "api/Contests/" + id);
        questions = (await Http.GetJsonAsync<Question[]>(GlobalSetting.baseAddress + "api/Questions")).Where(x => x.ContestId == Convert.ToInt32(id)).ToArray();
    }

    protected async Task UpdateContest()
    {
        if (contest.Title != null && contest.Duration != 0)
        {
            await Http.PutJsonAsync(GlobalSetting.baseAddress + "api/Contests/" + id, contest);
            NavigationManager.NavigateTo("homepage/creator/" + Convert.ToString(GlobalLoginState.LoggedCreatorID));
        }
        else Toaster.Add("Please do not leave any field empty", MatToastType.Danger);

    }
    void Cancel()
    {
        NavigationManager.NavigateTo("homepage/creator/" + Convert.ToString(GlobalLoginState.LoggedCreatorID));
    }

    protected async Task Delete(int Id)
    {
        contest.NumOfQuestion -= 1;
        questionAnswers = (await Http.GetJsonAsync<QuestionAnswer[]>(GlobalSetting.baseAddress + "api/QuestionAnswers")).Where(x => x.QuestionId == Convert.ToInt32(Id)).ToArray();
        foreach(var item in questionAnswers) //Agar tidak terjadi error
        {
            await Http.DeleteAsync(GlobalSetting.baseAddress + "api/QuestionAnswers/" + Convert.ToString(item.Id));
        }
        await Http.DeleteAsync(GlobalSetting.baseAddress + "api/Questions/" + Convert.ToString(Id));
        await Http.PutJsonAsync(GlobalSetting.baseAddress + "api/Contests/" + id, contest);
        NavigationManager.NavigateTo("edit/contest/"+id, forceLoad: true);
    }

    }
